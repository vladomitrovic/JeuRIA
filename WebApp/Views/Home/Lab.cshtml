
@{
    ViewBag.Title = "Lab";
}

<style>
    #drag-1, #drag-2 {
        width: 25%;
        height: 100%;
        min-height: 6.5em;
        margin: 10%;
        background-color: #29e;
        color: white;
        border-radius: 0.75em;
        padding: 4%;
        -webkit-transform: translate(0px, 0px);
        transform: translate(0px, 0px);
    }

    #drag-me::before {
        content: "#" attr(id);
        font-weight: bold;
    }

    #map {
        height: 400px; /* The height is 400 pixels */
        width: 100%; /* The width is the width of the web page */
    }
</style>

<div id="map"></div>

<div id="drag-1" class="draggable">
    <p>Drag&Drop me</p>
</div>
<div id="drag-2" class="draggable">
    <p>Drag&Drop me</p>
</div>


<script  src="http://code.interactjs.io/v1.3.4/interact.min.js"></script>

<script type="text/javascript">
    // target elements with the "draggable" class
    interact('.draggable')
        .draggable({
            // enable inertial throwing
            inertia: true,
            // keep the element within the area of it's parent
            restrict: {
                restriction: "parent",
                endOnly: true,
                elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
            },
            // enable autoScroll
            autoScroll: true,

            // call this function on every dragmove event
            onmove: dragMoveListener,
            // call this function on every dragend event
            onend: function (event) {
                var textEl = event.target.querySelector('p');

                textEl && (textEl.textContent =
                    'moved a distance of '
                    + (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +
                        Math.pow(event.pageY - event.y0, 2) | 0))
                        .toFixed(2) + 'px');
            }
        });

    function dragMoveListener(event) {
        var target = event.target,
            // keep the dragged position in the data-x/data-y attributes
            x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

        // translate the element
        target.style.webkitTransform =
            target.style.transform =
            'translate(' + x + 'px, ' + y + 'px)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
    }

    // this is used later in the resizing and gesture demos
    window.dragMoveListener = dragMoveListener;


</script>

<script>
    // Initialize and add the map
    function initMap() {
        // The location of Uluru
        var sierre = { lat: 46.2841976, lng: 7.516819399999999 };
        // The map, centered at Uluru
        var map = new google.maps.Map(
            document.getElementById('map'), { zoom: 4, center: sierre });
        // The marker, positioned at Uluru
        var marker = new google.maps.Marker({ position: sierre, map: map });
    }
</script>
<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVrfl09GN6uI56xZQwC2UpAiz10ja-MSg&callback=initMap">
</script>
